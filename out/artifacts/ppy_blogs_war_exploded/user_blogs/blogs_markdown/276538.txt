![在这里插入图片描述](https://img-blog.csdnimg.cn/20201120203932312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODM5NzA4,size_16,color_FFFFFF,t_70#pic_center)

```cpp
#include<iostream>
#include<algorithm>

using namespace std;

int a[1010];
int low, high, mid, index;
int sum = 0;

bool search(int x)
{
	if(low > high) // low 大于high 则结束查找 
	{
		index = -1; // 此时下标返回-1 
		return true;
	}
	
	sum++; // 每查找一次,次数+1 
	
	if(a[mid] == x)
	{
		index = mid;
		return true;
	}
	return false;
}

int main()
{
	int n;
	cin>>n;
	for(int i = 0; i < n; i++)
	{
		cin>>a[i];
	}
	sort(a, a + n);
	int x;
	cin>>x;
	
	low = 0;
	high = n - 1;
	mid = (low + high) / 2;
	while(!search(x)) // 没有找到则继续找 
	{
		if(a[mid] < x)
			low = mid + 1;
		else if(a[mid] > x)
			high = mid - 1;
		mid = (low + high) / 2;
	}
	cout<<index<<endl;
	cout<<sum;
}
```
**low =  mid  + 1**
**high = mid - 1**
*为了防止出现 l
ow 与 high 相邻
此时 mid 一直等于 low
当然也不会影响 查找值在边界 的结果*